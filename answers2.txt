Section II – UNIX, Scripting

IDG1100 Oblig
Henrik Landgraff Granum

6. What is the octal representation of a file that can be read and written only by its owner?
The octal representation of a file which can only be read and written by its owner is 600. If you want the owner to be able to execute this file as well, for example if the file was a script, we could use the octal representation of 700.

To set the wanted file permission of 600 you have to use the command chmod 600 (filename).

7. In UNIX systems, what is the common name of the special user that can access and modify every file?
The name of the special user that can access and modify every file in a UNIX system is superuser.

To run a command as the superuser, we use sudo (command).

8. Which file permission classes are available in UNIX systems?
There exist three different file permission classes in UNIX systems. These are the user, group and others. If we would like to remove or add privileges to any of these classes, we use the chmod together with a specification of which group(s) we want to change the permissions for, and which permissions to add or remove. The different permissions for a file are read, write and execute.

9. As of 2020, which percentage of servers have UNIX-like OS?
According to https://w3techs.com/technologies/overview/operating_system more than 70% of the operating system of servers are Unix or Unix-like. Their exact number as of 13 November 2020 is 71,8%.

10. The command ssh will:
...start the SSH client program. This program establishes a secure connection to a SSH server on a remote machine. The ssh command makes it possible to log into a remote machine, transferring files between the machines and execute commands on the remote machine. (https://www.ssh.com/ssh/command/)

All students and employees at NTNU have their own dedicated remote server. This server is accessed by using the command ssh studentname@login.stud.ntnu.no.

11. UNIX Command: access your current working directory
Use pwd for writing the path to your current working directory. Pwd is a shortage for "print working directory".

If you set your working directory to the desktop using cd Desktop/, and then use the pwd command, the output will be: /Users/username/Desktop.

12. UNIX Command: rename files (give an example)
To rename a file you can use the mv command. This is shortage for "move", so this command is also used for moving files or folders.

Let’s say our current working directory is the desktop. The path is /Users/username/Desktop. There exist one file there named apple.txt, and we would like to rename this one to pear.txt.

ls // lists all files at the current working directory, which is the desktop.
Output: apple.txt

mv apple.txt pear.txt // first the command wants the source, followed by the target. mv old-file-name new-file-name
Output: none. Since the operation was successful, there is no output and the file apple.txt is now renamed to pear.txt. Let's confirm this.

ls
Output: pear.txt

13. UNIX Command: schedule the execution of programs in the future
To schedule the execution of programs in the future, there is something called cron jobs. A cron job is a scheduled task which runs at its given time. Crontab -l makes it possible to see if there are any cron jobs saved. To change the file containing the cron jobs you have to use crontab -e.

A cron job needs to specify which time it will be running, and what to execute at that time. For example, would * * * * * /backup.sh run the script "backup.sh" every minute. The first asterisk represents minute, the second hour, third day, fourth month and the last one day of the week. When we use an asterisk, it means any value. Therefore, the given example will run at every single minute as long as the cron job is active.

14. UNIX Command: Forcefully shutdown the command with process ID 123
To shutdown a command, we can use the kill command. The command relies on knowing the PID, process ID, which in this case is 123. For stopping this process we can simply use kill 123. If for some reason this does not work, using sudo kill 123 will gain the necessary rights to kill the process.

If there was a process running which we would like to stop, but the PID is unknown, we would have to use the ps command. This lists all the running processes, and shows the PID's.

15. UNIX Command: access your root user
If you need special privileges and full rights, you can access your root user with the command sudo. This allows you to run a command as the root user as long as you include "sudo" in front of the commands every time. If you need to run several commands afterwards as the root user, you can use sudo -i to remove the need of including "sudo" every time. If you wonder which user you are currently using it is possible to use the command whoami, and the name of the active user will be printed.

16. Crontab scheduled: At minute 30 on Sunday.
Hover the crontab schedule values to see an explanation. An asterisk (*) means any value.

30 * * * 0 command-to-execute

17. Crontab scheduled: At minute 30 on day-of-month 15.
30 * 15 * * command-to-execute

18. Crontab scheduled: At 05:30 on every day-of-week from Sunday through Monday in June.
30 5 * 6 0-1 command-to-execute

19. Script: print your name and date
#!/bin/bash

# Creates a variable containing todays date.
# +%d.%m.%Y makes sure only the date is stored.
todaysDate=$(date +"%d.%m.%Y")

# Asks for the users name and stores it.
read -p "What is your name? " name

# Prints the users name and todays date.
echo "Hello $name, nice to see you! The date today is $todaysDate."

20. Script: add two numeric values, print the result
#!/bin/bash

# Prints instruction.
echo "Enter two numbers to see their sum."

# Reads the two numbers, and saves them in variables.
read -p "Enter first number: " number1
read -p "Enter second number: " number2

# Saves the sum of the numbers in a new variable.
answer=$((number1 + number2))

# Prints the sum.
echo "The sum of $number1 and $number2 is $answer."

21. Script: inputs username, prints “USERNAME stored”
#!/bin/bash

# Reads the users username, and stores it in a variable.
read -p "Please enter your username: " username

# Prints the username and a message saying it is stored.
echo "$username stored."

22. Script: Store the output of the command “hostname” in a variable. Display “This script is running on _.” where “_” is the output of the “hostname” command.
#!/bin/bash

# Saves the current host in a variable.
currentHost=$(hostname)

# Prints a message with the current host.
echo "This script is running on $currentHost."

23. Script: Store the output of the working directory (from where the script is run) in a variable then print the variable.
#!/bin/bash

# Saves the current working directory in a variable.
workingDirectory=$(pwd)

# Prints the current working directory.
echo "$workingDirectory"

24. Create a step by step tutorial on how to create a cronjob that prints “Task scheduled at” + DATE. Cronjob is scheduled every 30 minutes on today’s date (only today).
This tutorial is tested on macOS, using the terminal with the bash shell and the vi-editor.

Step 1: Press cmd+space and search for "Terminal". Press enter to open it.

Step 2: Write the command crontab -e to start creating the new cronjob. Then press i to enter insert mode.

Step 3: In insert mode, add the following line. Be sure to change the date to your current one! If your date is 24.12.20, then you need to type: */30 * 24 12 4. The first one represents minutes, which needs to stay as it is. Do not change the second one either, which represents every hour. The third value is the day, fourth is month and the last one day of the week. Make sure all of them are correct. You need to type in your own username instead of "henrikgranum". The command will create the file, so you don't need to do this in advance.

*/30 * 16 11 1 echo "Task scheduled at $(date)" >> /Users/henrikgranum/Desktop/log.txt

This will run the specified command at every 30 minute of the day this cronjob is set for, and output the text with the date/time to the specified location.

Step 4: We are now done creating the cronjob. To save and exit, first press the escape button on your keyboard. After that write :wq. Now your cronjob is saved, and you are back to the command line.

Step 5: On your desktop you will now notice that the file will be created, and the date output will be added to this file in the specified time. If you would like to test that the cronjob is working, you can change the minute to * so the command will print the date every minute.

Video version available at: https://youtu.be/yq4bgy-ZdJM

25. Create a script that takes an input (letter or number) that will display the answer of a question. The script should when started list a menu for the user with the different questions that can be chosen and which corresponding letter the user will have to give as input to display the answer of the desired question. One of the possible inputs the user should be able to make is "q" for quitting the script. The menu should also have a default case where all the items is displayed again, or no changes is made if the user gives an invalid input. Hint: use a switch case to be able to handle the menu. Each option in the menu should lead to an echo of the answer
#!/bin/bash

# Variable for keeping the number related to the questions.
question=

# Prints an instruction.
echo ""
echo "Please choose one of the questions by typing a number (1-5)."
echo "To exit the program, type "q"."
echo ""

# As long as the user don't type q, run this code.
while [ "$question" != "q" ]
do

echo "-----------------------------------------------"
echo "1. What is the world's longest river?"
echo "2. What is the diameter of Earth?"
echo "3. What is the capital city of Spain?"
echo "4. Who directed the Lord of the Rings trilogy?"
echo "5. Which university is the best?"
echo "-----------------------------------------------"
echo ""

# Choose which questions answer to show.
read -p "Which question do you want the answer for (1-5): " question

# If the user writes a Q instead of q, make it lowercase.
if [ "$question" == "Q" ]
then
question="q"
fi

# Prints the answer to the question the user wanted.
case $question in

1)
echo "ANSWER: The world's longest river is the Amazon river."
echo ""
;;

2)
echo "ANSWER: The diameter of the earth is 8000 miles."
echo ""
;;

3)
echo "ANSWER: The capital city of Spain is Madrid."
echo ""
;;

4)
echo "ANSWER: Lord of the Rings was directed by Peter Jackson."
echo ""
;;

5)
echo "ANSWER: NTNU of course! :) But you already knew that?"
echo ""
;;

# If the user writes q, the program will end and this message will confirm it.
q)
echo "Program ended."
echo ""
;;

# If the user writes an unknown command, there will be an error message.
*)
echo "Not a valid value. Please read the instructions carefully."
echo ""
;;

esac

done